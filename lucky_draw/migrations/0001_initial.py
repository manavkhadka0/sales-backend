# Generated by Django 5.1.4 on 2025-09-15 10:38

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ElectronicOfferCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_condition_name', models.CharField(max_length=100)),
                ('condition', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LuckyDrawSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('background_image', models.FileField(blank=True, null=True, upload_to='lucky_draws/')),
                ('hero_image', models.FileField(blank=True, null=True, upload_to='lucky_draws/')),
                ('main_offer_stamp_image', models.FileField(blank=True, null=True, upload_to='lucky_draws/')),
                ('hero_title', models.CharField(default='', max_length=255)),
                ('hero_subtitle', models.CharField(default='', max_length=255)),
                ('qr', models.FileField(blank=True, null=True, upload_to='lucky_draws/')),
                ('type', models.CharField(choices=[('Mobile Phone Brand', 'Mobile Phone Brand'), ('Electronics Shop', 'Electronics Shop'), ('Other Shop', 'Other Shop')], max_length=20)),
                ('created_at', models.DateField(auto_now_add=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('uuid_key', models.CharField(default='', max_length=255, unique=True)),
                ('how_to_participate', models.TextField(blank=True)),
                ('redeem_condition', models.TextField(blank=True)),
                ('terms_and_conditions', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='MobileOfferCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_condition_name', models.CharField(max_length=100)),
                ('condition', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('logo', models.FileField(blank=True, null=True, upload_to='organizations/')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RechargeCardCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_condition_name', models.CharField(max_length=100)),
                ('condition', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='IMEINO',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imei_no', models.CharField(max_length=400, unique=True)),
                ('phone_model', models.CharField(blank=True, max_length=400)),
                ('used', models.BooleanField(default=False)),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imei_numbers', to='lucky_draw.luckydrawsystem')),
            ],
        ),
        migrations.CreateModel(
            name='GiftItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('image', models.FileField(blank=True, null=True, upload_to='gift_items/')),
                ('category', models.CharField(blank=True, choices=[('minor', 'Minor Gift'), ('major', 'Major Gift'), ('grand', 'Grand Gift')], default='minor', max_length=10, null=True)),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gift_items', to='lucky_draw.luckydrawsystem')),
            ],
        ),
        migrations.CreateModel(
            name='FixOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('imei_no', models.CharField(blank=True, max_length=400, null=True)),
                ('quantity', models.PositiveIntegerField()),
                ('gift', models.ManyToManyField(blank=True, to='lucky_draw.giftitem')),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fix_offers', to='lucky_draw.luckydrawsystem')),
            ],
        ),
        migrations.CreateModel(
            name='ElectronicsShopOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField(default='00:00')),
                ('end_time', models.TimeField(default='23:59')),
                ('has_time_limit', models.BooleanField(default=False)),
                ('daily_quantity', models.PositiveIntegerField(default=0)),
                ('type_of_offer', models.CharField(choices=[('After every certain sale', 'After every certain sale'), ('At certain sale position', 'At certain sale position')], max_length=30)),
                ('offer_condition_value', models.CharField(blank=True, max_length=500)),
                ('sale_numbers', models.JSONField(blank=True, null=True)),
                ('has_region_limit', models.BooleanField(default=False)),
                ('valid_condition', models.ManyToManyField(blank=True, to='lucky_draw.electronicoffercondition')),
                ('gift', models.ManyToManyField(blank=True, to='lucky_draw.giftitem')),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lucky_draw.luckydrawsystem')),
            ],
            options={
                'ordering': ('start_date',),
            },
        ),
        migrations.CreateModel(
            name='MobilePhoneOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField(default='00:00')),
                ('end_time', models.TimeField(default='23:59')),
                ('has_time_limit', models.BooleanField(default=False)),
                ('daily_quantity', models.PositiveIntegerField(default=0)),
                ('type_of_offer', models.CharField(choices=[('After every certain sale', 'After every certain sale'), ('At certain sale position', 'At certain sale position')], max_length=30)),
                ('offer_condition_value', models.CharField(blank=True, max_length=500)),
                ('sale_numbers', models.JSONField(blank=True, null=True)),
                ('has_region_limit', models.BooleanField(default=False)),
                ('priority', models.PositiveIntegerField(default=0)),
                ('gift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lucky_draw.giftitem')),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lucky_draw.luckydrawsystem')),
                ('valid_condition', models.ManyToManyField(blank=True, to='lucky_draw.mobileoffercondition')),
            ],
            options={
                'ordering': ('start_date', 'priority'),
            },
        ),
        migrations.AddField(
            model_name='luckydrawsystem',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lucky_draw.organization'),
        ),
        migrations.CreateModel(
            name='RechargeCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cardno', models.CharField(max_length=400, unique=True)),
                ('provider', models.CharField(choices=[('Ncell', 'Ncell'), ('Ntc', 'Ntc'), ('Smart Cell', 'Smart Cell'), ('Others', 'Others')], max_length=20)),
                ('amount', models.IntegerField(choices=[(50, '50'), (100, '100'), (200, '200'), (500, '500')])),
                ('is_assigned', models.BooleanField(default=False)),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recharge_cards', to='lucky_draw.luckydrawsystem')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=400)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('shop_name', models.TextField()),
                ('sold_area', models.CharField(max_length=800)),
                ('phone_number', models.CharField(max_length=20)),
                ('product_purchased', models.CharField(blank=True, max_length=400, null=True)),
                ('bill_number', models.CharField(blank=True, max_length=400, null=True)),
                ('phone_model', models.CharField(blank=True, max_length=400, null=True)),
                ('sale_status', models.CharField(default='SOLD', max_length=20)),
                ('prize_details', models.CharField(default='Thank You', max_length=900)),
                ('imei', models.CharField(blank=True, max_length=400)),
                ('date_of_purchase', models.DateField(auto_now_add=True)),
                ('region', models.CharField(default='None', max_length=400)),
                ('how_know_about_campaign', models.CharField(choices=[('Facebook Ads', 'Facebook Ads'), ('Retail Shop', 'Retail Shop'), ('Google Ads', 'Google Ads'), ('Friends Recommendation', 'Friends Recommendation'), ('Youtube', 'Youtube'), ('Others', 'Others')], max_length=50)),
                ('ntc_recharge_card', models.BooleanField(default=False)),
                ('amount_of_card', models.PositiveIntegerField(default=50, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(500)])),
                ('profession', models.CharField(default='None', max_length=400)),
                ('gift', models.ManyToManyField(blank=True, to='lucky_draw.giftitem')),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='lucky_draw.luckydrawsystem')),
                ('recharge_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', to='lucky_draw.rechargecard')),
            ],
            options={
                'ordering': ('-date_of_purchase',),
            },
        ),
        migrations.CreateModel(
            name='RechargeCardOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField(default='00:00')),
                ('end_time', models.TimeField(default='23:59')),
                ('has_time_limit', models.BooleanField(default=False)),
                ('daily_quantity', models.PositiveIntegerField(default=0)),
                ('type_of_offer', models.CharField(choices=[('After every certain sale', 'After every certain sale'), ('At certain sale position', 'At certain sale position')], max_length=30)),
                ('offer_condition_value', models.CharField(blank=True, max_length=500)),
                ('sale_numbers', models.JSONField(blank=True, null=True)),
                ('has_region_limit', models.BooleanField(default=False)),
                ('amount', models.IntegerField(choices=[(50, '50'), (100, '100'), (200, '200'), (500, '500')], default=50)),
                ('provider', models.CharField(choices=[('Ncell', 'Ncell'), ('Ntc', 'Ntc'), ('Smart Cell', 'Smart Cell'), ('Others', 'Others')], default='Ncell', max_length=20)),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lucky_draw.luckydrawsystem')),
                ('valid_condition', models.ManyToManyField(blank=True, to='lucky_draw.rechargecardcondition')),
            ],
            options={
                'ordering': ('start_date',),
            },
        ),
        migrations.CreateModel(
            name='Sales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sales_count', models.IntegerField(default=0)),
                ('date', models.DateField()),
                ('lucky_draw_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='lucky_draw.luckydrawsystem')),
            ],
        ),
    ]
